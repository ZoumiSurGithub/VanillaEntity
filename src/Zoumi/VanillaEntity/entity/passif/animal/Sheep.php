<?php

namespace Zoumi\VanillaEntity\entity\passif\animal;

use pocketmine\block\utils\DyeColor;
use pocketmine\block\VanillaBlocks;
use pocketmine\data\bedrock\DyeColorIdMap;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Location;
use pocketmine\item\Shears;
use pocketmine\item\VanillaItems;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataCollection;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataFlags;
use pocketmine\network\mcpe\protocol\types\entity\EntityMetadataProperties;
use pocketmine\player\Player;
use Zoumi\VanillaEntity\entity\type\PassiveEntity;

class Sheep extends PassiveEntity
{

    private DyeColor $color;
    private bool $sheared = false;

    public function __construct(Location $location, ?CompoundTag $nbt = null, bool $is_baby = false)
    {
        parent::__construct($location, $nbt, $is_baby);
        $this->setSpeed(1.5);
        $this->setDistracted(true, VanillaItems::WHEAT()); //NOT IMPLEMENTED YET
        $this->setMaxHealth(8);
    }

    protected function initEntity(CompoundTag $nbt): void
    {
        $color = [0, 7, 8, 15, 12, 6];
        $r = lcg_value();
        $weights = [0.81836, 0.05, 0.05, 0.05, 0.03, 0.00164];
        for ($i = 0, $len = count($weights); $i < $len; ++$i) {
            $r -= $weights[$i];
            if ($r <= 0) {
                $color = $color[$i];
                break;
            }
        }
        $this->sheared = $nbt->getByte("sheared", 0);
        $this->color = DyeColorIdMap::getInstance()->fromId($nbt->getByte("color", $color));
        parent::initEntity($nbt);
    }

    /**
     * @return DyeColor
     */
    public function getColor(): DyeColor
    {
        return $this->color;
    }

    /**
     * @param DyeColor $color
     */
    public function setColor(DyeColor $color): void
    {
        $this->color = $color;
    }

    /**
     * @return bool
     */
    public function isSheared(): bool
    {
        return $this->sheared;
    }

    /**
     * @param bool $sheared
     */
    public function setSheared(bool $sheared): void
    {
        $this->sheared = $sheared;
        $this->syncNetworkData($this->getNetworkProperties());
    }

    protected function getInitialSizeInfo(): EntitySizeInfo
    {
        return new EntitySizeInfo(1.3, 0.9);
    }

    public static function getNetworkTypeId(): string
    {
        return EntityIds::SHEEP;
    }

    public function getName(): string
    {
        return "Sheep";
    }

    public function getXpDropBaby(): int
    {
        return mt_rand(1, 7);
    }

    public function getDrops(): array
    {
        if (!$this->isBaby()) {
            return [VanillaBlocks::WOOL()->setColor($this->color)->asItem()->setCount(1), $this->isOnFire() ? VanillaItems::COOKED_MUTTON()->setCount(mt_rand(1, 2)) : VanillaItems::RAW_MUTTON()->setCount(mt_rand(1, 2))];
        }
        return [];
    }

    public function getXpDropAmount(): int
    {
        return mt_rand(1, 3);
    }

    protected function syncNetworkData(EntityMetadataCollection $properties): void
    {
        parent::syncNetworkData($properties); // TODO: Change the autogenerated stub
        $properties->setGenericFlag(EntityMetadataFlags::SHEARED, $this->sheared);
        $properties->setByte(EntityMetadataProperties::COLOR, DyeColorIdMap::getInstance()->toId($this->color));
    }

    public function saveNBT(): CompoundTag
    {
        $nbt = parent::saveNBT();
        $nbt->setByte("color", DyeColorIdMap::getInstance()->toId($this->color));
        $nbt->setByte("sheared", $this->sheared ? 1 : 0);
        return $nbt;
    }

    public function onInteract(Player $player, Vector3 $clickPos): bool
    {
        $item = $player->getInventory()->getItemInHand();
        if ($item instanceof Shears && !$this->isSheared()) {
            $this->setSheared(true);
            $this->broadcastViewersSound("mob.sheep.shear");
            $item->applyDamage(1);
            $player->getInventory()->setItemInHand($item);
            $this->getWorld()->dropItem($this->getPosition(), VanillaBlocks::WOOL()->setColor($this->color)->asItem()->setCount(mt_rand(1, 3)));
            return true;
        } elseif ($item->getTypeId() === VanillaItems::WHEAT()->getTypeId()) {
            if (!$this->isBaby()) {
                if (!$this->isInLove()) {
                    $item->setCount($item->getCount() - 1);
                    $player->getInventory()->setItemInHand($item);
                    $this->setInLove(true);
                    return true;
                }
            } else {
                $item->setCount($item->getCount() - 1);
                $player->getInventory()->setItemInHand($item);
                $this->tickToAdult = $this->tickToAdult - ($this->tickToAdult * 0.1);
            }
        }
        return parent::onInteract($player, $clickPos);
    }

    public function canBeMounted(): bool
    {
        return false;
    }
}